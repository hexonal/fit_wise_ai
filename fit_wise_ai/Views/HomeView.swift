//
//  HomeView.swift
//  fit_wise_ai
//
//  Created by AI on 2025/8/24.
//

import SwiftUI
import HealthKit
import Charts

/**
 * ‰∏ªÈ°µËßÜÂõæ - ÂÅ•Â∫∑Êï∞ÊçÆÊ¶ÇËßà
 * 
 * ÂäüËÉΩÂåÖÊã¨Ôºö
 * 1. HealthKitÊùÉÈôêÊ£ÄÊü•ÂíåËØ∑Ê±Ç
 * 2. ‰ªäÊó•ÂÅ•Â∫∑Êï∞ÊçÆÂ±ïÁ§∫ÔºàÊ≠•Êï∞„ÄÅÂøÉÁéá„ÄÅÊ¥ªÂä®Ê∂àËÄóÁ≠âÔºâ
 * 3. 7Â§©ÂÅ•Â∫∑Êï∞ÊçÆË∂ãÂäøÂõæË°®
 * 4. Ëá™ÈÄÇÂ∫îÂ∏ÉÂ±ÄÊîØÊåÅÔºàiPhone SEÂà∞iPadÔºâ
 * 5. ‰∏ãÊãâÂà∑Êñ∞ÂäüËÉΩ
 */
struct HomeView: View {
    /// ÂÅ•Â∫∑Êï∞ÊçÆËßÜÂõæÊ®°ÂûãÔºåÁÆ°ÁêÜÊï∞ÊçÆÁä∂ÊÄÅÂíå‰∏öÂä°ÈÄªËæë
    @StateObject private var viewModel = HealthDataViewModel()
    @EnvironmentObject var healthKitService: HealthKitService
    @State private var selectedTab = 0
    /// ÊòØÂê¶Ê≠£Âú®Ê£ÄÊü•ÊùÉÈôêÁä∂ÊÄÅÁöÑÊ†áËØÜÔºåÁî®‰∫éÊòæÁ§∫Âä†ËΩΩÁïåÈù¢
    @State private var isCheckingPermissions = true
    /// Áº∫Â§±ÁöÑHealthKitÊùÉÈôêÂàóË°®ÔºåÁî®‰∫éÊòæÁ§∫ÂÖ∑‰ΩìÈúÄË¶ÅÂì™‰∫õÊùÉÈôê
    @State private var missingPermissions: [HKObjectType] = []
    
    var body: some View {
        NavigationStack {
            GeometryReader { geometry in
                ZStack {
                    // ÈÄèÊòéËÉåÊôØ‰ª•ÊòæÁ§∫Ê∏êÂèò
                    Color.clear
                    
                    if isCheckingPermissions {
                        // Áé∞‰ª£ÂåñÊùÉÈôêÊ£ÄÊü•Âä†ËΩΩÁïåÈù¢
                        AILoadingView(message: "Ê≠£Âú®Ê£ÄÊü•ÂÅ•Â∫∑Êï∞ÊçÆÊùÉÈôê...")
                            .frame(maxWidth: .infinity, maxHeight: .infinity)
                    } else {
                        ScrollView {
                            VStack(spacing: adaptiveSpacing(for: geometry)) {
                                // Ê†πÊçÆÊùÉÈôêÁä∂ÊÄÅÊòæÁ§∫‰∏çÂêåÂÜÖÂÆπ
                                if !missingPermissions.isEmpty {
                                    // ÊùÉÈôêËØ∑Ê±ÇËßÜÂõæ
                                    SimplePermissionRequestView(
                                        missingPermissions: missingPermissions
                                    ) {
                                        await checkPermissionsAndRefreshData()
                                    }
                                } else if healthKitService.isAuthorized {
                                    // Áé∞‰ª£ÂåñÁöÑÂÅ•Â∫∑Êï∞ÊçÆÂ±ïÁ§∫ÔºàËá™ÈÄÇÂ∫îÂ∏ÉÂ±ÄÔºâ
                                    VStack(spacing: adaptiveSpacing(for: geometry)) {
                                        // ‰ªäÊó•ÂÅ•Â∫∑ÁªüËÆ°Êï∞ÊçÆÂ±ïÁ§∫ÔºàËá™ÈÄÇÂ∫îÁΩëÊ†ºÔºâ
                                        AdaptiveHealthStatsView(
                                            healthData: viewModel.healthData, 
                                            geometry: geometry
                                        )
                                        
                                        // 7Â§©Êï∞ÊçÆË∂ãÂäøÂõæË°®ÔºàËá™ÈÄÇÂ∫îÈ´òÂ∫¶Ôºâ
                                        if !healthKitService.weeklyHealthData.isEmpty {
                                            AdaptiveWeeklyChartsView(
                                                weeklyData: healthKitService.weeklyHealthData, 
                                                selectedTab: $selectedTab,
                                                geometry: geometry
                                            )
                                            
                                            // Êï∞ÊçÆËØ¶ÊÉÖÂàóË°®ÔºàÊ†πÊçÆÂ±èÂπïÂ§ßÂ∞èËá™ÈÄÇÂ∫îÊòæÁ§∫Ôºâ
                                            if !isCompactLayout(for: geometry) {
                                                // ÈùûÁ¥ßÂáëÂ∏ÉÂ±ÄÊòæÁ§∫ÂÆåÊï¥ÁöÑÊï∞ÊçÆÂàóË°®
                                                FullWeeklyDataView(weeklyData: healthKitService.weeklyHealthData)
                                            } else {
                                                // Á¥ßÂáëÂ∏ÉÂ±ÄÊó∂ÊòæÁ§∫ÁÆÄÂåñÁâàÊú¨
                                                CompactWeeklyDataView(weeklyData: healthKitService.weeklyHealthData, geometry: geometry)
                                            }
                                        } else {
                                            // Êó†Êï∞ÊçÆÊó∂ÊòæÁ§∫ÊèêÁ§∫
                                            NoDataView()
                                        }
                                    }
                                } else {
                                    // ÂàùÂßãÊùÉÈôêËØ∑Ê±ÇËßÜÂõæ
                                    InitialPermissionView()
                                }
                            }
                            .padding(adaptivePadding(for: geometry))
                        }
                    }
                }
                .navigationTitle("ÂÅ•Â∫∑Ê¶ÇËßà")
                .navigationBarTitleDisplayMode(.large)
                // ‰∏ãÊãâÂà∑Êñ∞ÂäüËÉΩ
                .refreshable {
                    await checkPermissionsAndRefreshData()
                }
            }
        }
        // ËßÜÂõæÈ¶ñÊ¨°Âä†ËΩΩÊó∂Ê£ÄÊü•ÊùÉÈôê
        .task {
            await checkPermissionsAndRefreshData()
        }
        // ÊùÉÈôêË¢´ÊãíÁªùÊó∂ÁöÑÊèêÁ§∫ÂØπËØùÊ°Ü
        .alert("ÂÅ•Â∫∑Êï∞ÊçÆËÆøÈóÆË¢´ÊãíÁªù", isPresented: $viewModel.showingPermissionAlert) {
            Button("ÈáçÊñ∞ÊéàÊùÉ") {
                Task {
                    await healthKitService.requestAuthorization()
                    await checkPermissionsAndRefreshData()
                }
            }
            Button("ÂèñÊ∂à", role: .cancel) { }
        } message: {
            Text("ÈúÄË¶ÅËÆøÈóÆÊÇ®ÁöÑÂÅ•Â∫∑Êï∞ÊçÆ‰ª•Êèê‰æõ‰∏™ÊÄßÂåñÂª∫ËÆÆ„ÄÇËØ∑Âú®Á≥ªÁªüÊùÉÈôêÂØπËØùÊ°Ü‰∏≠ÈÄâÊã©\"ÂÖÅËÆ∏\"„ÄÇ")
        }
    }
    
    // MARK: - Private Methods
    
    /// Ê£ÄÊü•HealthKitÊùÉÈôêÁä∂ÊÄÅÂπ∂Âà∑Êñ∞ÂÅ•Â∫∑Êï∞ÊçÆ
    private func checkPermissionsAndRefreshData() async {
        print("üîµ HomeView: ÂºÄÂßãÊùÉÈôêÊ£ÄÊü•ÊµÅÁ®ã")
        isCheckingPermissions = true
        
        // È¶ñÂÖàÊ£ÄÊü•ÂΩìÂâçÊéàÊùÉÁä∂ÊÄÅ
        await healthKitService.checkCurrentAuthorizationStatus()
        print("üîµ HomeView: ÊùÉÈôêÊ£ÄÊü•ÂÆåÊàêÔºåisAuthorized: \(healthKitService.isAuthorized)")
        
        // Ê£ÄÊü•Â∫îÁî®ÂøÖÈúÄÁöÑHealthKitÊùÉÈôêÔºåËøîÂõûÁº∫Â§±ÁöÑÊùÉÈôêÁ±ªÂûã
        let requiredTypes: [HKObjectType] = [
            HKQuantityType.quantityType(forIdentifier: .stepCount)!,
            HKQuantityType.quantityType(forIdentifier: .distanceWalkingRunning)!,
            HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned)!,
            HKQuantityType.quantityType(forIdentifier: .heartRate)!
        ]
        
        missingPermissions = requiredTypes.filter { type in
            healthKitService.healthStore.authorizationStatus(for: type) != .sharingAuthorized
        }
        
        if healthKitService.isAuthorized && missingPermissions.isEmpty {
            print("üîµ HomeView: ÊùÉÈôêÂÆåÊï¥ÔºåÂºÄÂßãÂà∑Êñ∞ÂÅ•Â∫∑Êï∞ÊçÆ")
            await viewModel.refreshHealthData()
            await healthKitService.fetchTodayHealthData()
            await healthKitService.fetchWeeklyHealthData()
            print("üîµ HomeView: ÂÅ•Â∫∑Êï∞ÊçÆÂà∑Êñ∞ÂÆåÊàê")
        } else {
            print("üîµ HomeView: ÊùÉÈôê‰∏çÂÆåÊï¥ÔºåÂ∞ÜÊòæÁ§∫ÊùÉÈôêËØ∑Ê±ÇÁïåÈù¢")
        }
        
        // ÊùÉÈôêÊ£ÄÊü•ÂÆåÊàêÔºåÊõ¥Êñ∞UIÁä∂ÊÄÅ
        isCheckingPermissions = false
    }
    
    // MARK: - Ëá™ÈÄÇÂ∫îÂ∏ÉÂ±ÄËæÖÂä©ÂáΩÊï∞
    
    /// Ê†πÊçÆÂ±èÂπïÂ§ßÂ∞èËÆ°ÁÆóËá™ÈÄÇÂ∫îÈó¥Ë∑ù
    private func adaptiveSpacing(for geometry: GeometryProxy) -> CGFloat {
        let screenWidth = geometry.size.width
        let screenHeight = geometry.size.height
        let isCompact = screenWidth < 400 || screenHeight < 700
        let isRegular = screenWidth > 600
        
        if isCompact {
            return AISpacing.sm
        } else if isRegular {
            return AISpacing.xl
        } else {
            return AISpacing.lg
        }
    }
    
    /// Ê†πÊçÆÂ±èÂπïÂ§ßÂ∞èÂà§Êñ≠ÊòØÂê¶‰∏∫Á¥ßÂáëÂ∏ÉÂ±Ä
    private func isCompactLayout(for geometry: GeometryProxy) -> Bool {
        return geometry.size.width < 400 || geometry.size.height < 700
    }
    
    /// Ê†πÊçÆÂ±èÂπïÂ§ßÂ∞èËÆ°ÁÆóËá™ÈÄÇÂ∫îÂÜÖËæπË∑ù
    private func adaptivePadding(for geometry: GeometryProxy) -> EdgeInsets {
        let screenWidth = geometry.size.width
        
        if screenWidth < 400 {
            return EdgeInsets(top: AISpacing.sm, leading: AISpacing.sm, bottom: AISpacing.sm, trailing: AISpacing.sm)
        } else if screenWidth > 600 {
            return EdgeInsets(top: AISpacing.lg, leading: AISpacing.xl, bottom: AISpacing.lg, trailing: AISpacing.xl)
        } else {
            return EdgeInsets(top: AISpacing.md, leading: AISpacing.md, bottom: AISpacing.md, trailing: AISpacing.md)
        }
    }
    
}

// MARK: - Ëá™ÈÄÇÂ∫îÁªÑ‰ª∂

/**
 * Ëá™ÈÄÇÂ∫îÂÅ•Â∫∑ÁªüËÆ°ËßÜÂõæ
 */
struct AdaptiveHealthStatsView: View {
    let healthData: HealthData
    let geometry: GeometryProxy
    
    /// Ê†πÊçÆÂ±èÂπïÂ§ßÂ∞èËÆ°ÁÆóËá™ÈÄÇÂ∫îÂàóÊï∞
    private var adaptiveColumns: [GridItem] {
        let screenWidth = geometry.size.width
        let isLandscape = geometry.size.width > geometry.size.height
        let minColumnWidth: CGFloat = 140
        let padding: CGFloat = 32
        let spacing: CGFloat = 12
        let availableWidth = screenWidth - padding
        let maxColumns = max(1, Int(availableWidth / (minColumnWidth + spacing)))
        
        let finalColumns: Int
        if screenWidth < 400 {  // iPhone SEÁ≠âÂ∞èÂ±èÂπï
            finalColumns = isLandscape ? min(3, maxColumns) : 2
        } else if screenWidth > 600 {  // iPadÁ≠âÂ§ßÂ±èÂπï
            finalColumns = isLandscape ? min(5, maxColumns) : min(3, maxColumns)
        } else {  // Ê†áÂáÜiPhone
            finalColumns = isLandscape ? min(4, maxColumns) : 2
        }
        
        return Array(repeating: GridItem(.flexible(), spacing: spacing), count: finalColumns)
    }
    
    /// Ëá™ÈÄÇÂ∫îÈó¥Ë∑ù
    private var adaptiveSpacing: CGFloat {
        let screenWidth = geometry.size.width
        if screenWidth < 400 {
            return AISpacing.xs
        } else if screenWidth > 600 {
            return AISpacing.lg
        } else {
            return AISpacing.sm
        }
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: adaptiveSpacing) {
            HStack {
                Text("‰ªäÊó•Ê¶ÇËßà")
                    .font(geometry.size.width < 400 ? AITypography.headline : AITypography.title2)
                    .fontWeight(.bold)
                    .foregroundColor(AITheme.textPrimary)
                
                Spacer()
                
                Text(DateFormatter.shortDate.string(from: healthData.date))
                    .font(AITypography.caption)
                    .foregroundColor(AITheme.textSecondary)
            }
            
            LazyVGrid(columns: adaptiveColumns, spacing: adaptiveSpacing) {
                AIStatsCard(
                    title: "Ê≠•Êï∞",
                    value: "\(healthData.steps)",
                    icon: "figure.walk",
                    color: AITheme.accent,
                    trend: healthData.steps >= 10000 ? "ËææÊ†á" : nil,
                    isPositiveTrend: healthData.steps >= 10000
                )
                
                AIStatsCard(
                    title: "Ê¥ªÂä®Ê∂àËÄó",
                    value: String(format: "%.0f", healthData.activeEnergyBurned),
                    icon: "flame.fill",
                    color: .orange
                )
                
                AIStatsCard(
                    title: "ËøêÂä®Êó∂Èïø",
                    value: String(format: "%.0f", healthData.workoutTime / 60),
                    icon: "timer",
                    color: .green
                )
                
                if let heartRate = healthData.heartRate {
                    AIStatsCard(
                        title: "ÂøÉÁéá",
                        value: String(format: "%.0f", heartRate),
                        icon: "heart.fill",
                        color: .red
                    )
                }
            }
        }
    }
}

/**
 * Ëá™ÈÄÇÂ∫îÂë®Êï∞ÊçÆÂõæË°®ËßÜÂõæ
 */
struct AdaptiveWeeklyChartsView: View {
    let weeklyData: [HealthData]
    @Binding var selectedTab: Int
    let geometry: GeometryProxy
    
    /// Ëá™ÈÄÇÂ∫îÂõæË°®È´òÂ∫¶
    private var adaptiveChartHeight: CGFloat {
        let screenHeight = geometry.size.height
        let screenWidth = geometry.size.width
        let isLandscape = screenWidth > screenHeight
        let baseRatio: CGFloat = isLandscape ? 0.25 : 0.22
        let calculatedHeight = screenHeight * baseRatio
        let minHeight: CGFloat = 150
        let maxHeight: CGFloat = 300
        return max(minHeight, min(maxHeight, calculatedHeight))
    }
    
    /// Ëá™ÈÄÇÂ∫îÈó¥Ë∑ù
    private var adaptiveSpacing: CGFloat {
        geometry.size.width < 400 ? AISpacing.sm : AISpacing.lg
    }
    
    /// Ëá™ÈÄÇÂ∫îÂ≠ó‰ΩìÂ§ßÂ∞è
    private var adaptiveTitleFont: Font {
        geometry.size.width < 400 ? AITypography.headline : AITypography.title2
    }
    
    private var chineseWeekdayFormatter: DateFormatter {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "zh_CN")
        formatter.dateFormat = geometry.size.width < 400 ? "E" : "EEE"
        return formatter
    }
    
    var body: some View {
        AICard {
            VStack(alignment: .leading, spacing: adaptiveSpacing) {
                Text("7Â§©Ë∂ãÂäø")
                    .font(adaptiveTitleFont)
                    .fontWeight(.bold)
                    .foregroundColor(AITheme.textPrimary)
                
                // Êï∞ÊçÆÁ±ªÂûãÈÄâÊã©Âô®
                Picker("", selection: $selectedTab) {
                    Text("Ê≠•Êï∞").tag(0)
                    Text("Ê∂àËÄó").tag(1)
                    Text("ËøêÂä®").tag(2)
                }
                .pickerStyle(.segmented)
                .scaleEffect(geometry.size.width < 400 ? 0.9 : 1.0)
                
                // ÂõæË°®
                Chart(weeklyData) { data in
                    switch selectedTab {
                    case 0: // Ê≠•Êï∞
                        LineMark(
                            x: .value("Êó•Êúü", data.date, unit: .day),
                            y: .value("Ê≠•Êï∞", data.steps)
                        )
                        .foregroundStyle(AITheme.primaryGradient)
                        .symbol(Circle().strokeBorder(lineWidth: 2))
                        
                        AreaMark(
                            x: .value("Êó•Êúü", data.date, unit: .day),
                            y: .value("Ê≠•Êï∞", data.steps)
                        )
                        .foregroundStyle(AITheme.primaryGradient.opacity(0.3))
                        
                    case 1: // Ê¥ªÂä®Ê∂àËÄó
                        BarMark(
                            x: .value("Êó•Êúü", data.date, unit: .day),
                            y: .value("Âç°Ë∑ØÈáå", data.activeEnergyBurned)
                        )
                        .foregroundStyle(AITheme.secondaryGradient)
                        .cornerRadius(4)
                        
                    case 2: // ËøêÂä®Êó∂Èïø
                        LineMark(
                            x: .value("Êó•Êúü", data.date, unit: .day),
                            y: .value("ÂàÜÈíü", data.workoutTime / 60)
                        )
                        .foregroundStyle(.green)
                        .symbol(Circle().strokeBorder(lineWidth: 2))
                        
                    default:
                        LineMark(
                            x: .value("Êó•Êúü", data.date, unit: .day),
                            y: .value("Ê≠•Êï∞", data.steps)
                        )
                        .foregroundStyle(AITheme.primaryGradient)
                    }
                }
                .frame(height: adaptiveChartHeight)
                .chartXAxis {
                    AxisMarks(values: .stride(by: .day)) { value in
                        AxisGridLine()
                        AxisValueLabel {
                            if let date = value.as(Date.self) {
                                Text(chineseWeekdayFormatter.string(from: date))
                                    .font(AITypography.caption)
                            }
                        }
                    }
                }
                .chartYAxis {
                    AxisMarks { _ in
                        AxisGridLine()
                        AxisValueLabel()
                    }
                }
            }
        }
    }
}

/**
 * ÂÆåÊï¥ÁöÑÂë®Êï∞ÊçÆÂàóË°®ËßÜÂõæÔºàÈùûÁ¥ßÂáëÂ∏ÉÂ±ÄÔºâ
 */
struct FullWeeklyDataView: View {
    let weeklyData: [HealthData]
    
    var body: some View {
        VStack(alignment: .leading, spacing: AISpacing.md) {
            Text("Êï∞ÊçÆËØ¶ÊÉÖ")
                .font(AITypography.title2)
                .fontWeight(.bold)
                .foregroundColor(AITheme.textPrimary)
            
            if weeklyData.isEmpty {
                AICard {
                    Text("ÊöÇÊó†ÂéÜÂè≤Êï∞ÊçÆ")
                        .font(AITypography.headline)
                        .foregroundColor(AITheme.textSecondary)
                        .frame(maxWidth: .infinity)
                        .padding(AISpacing.lg)
                }
            } else {
                LazyVStack(spacing: AISpacing.sm) {
                    ForEach(weeklyData.sorted { $0.date > $1.date }) { data in
                        FullDataRow(data: data)
                    }
                }
            }
        }
    }
}

/**
 * ÂÆåÊï¥Êï∞ÊçÆË°å
 */
struct FullDataRow: View {
    let data: HealthData
    
    private var dateFormatter: DateFormatter {
        let formatter = DateFormatter()
        formatter.dateFormat = "MMÊúàddÊó•"
        return formatter
    }
    
    private var isToday: Bool {
        Calendar.current.isDateInToday(data.date)
    }
    
    var body: some View {
        AICard(padding: AISpacing.md, isElevated: false) {
            HStack {
                VStack(alignment: .leading, spacing: AISpacing.xs) {
                    HStack {
                        Text(dateFormatter.string(from: data.date))
                            .font(AITypography.callout)
                            .fontWeight(.semibold)
                            .foregroundColor(AITheme.textPrimary)
                        
                        if isToday {
                            Text("‰ªäÂ§©")
                                .font(AITypography.caption)
                                .padding(.horizontal, AISpacing.sm)
                                .padding(.vertical, 2)
                                .background(AITheme.accent)
                                .foregroundColor(.white)
                                .cornerRadius(AIRadius.sm)
                        }
                        
                        Spacer()
                    }
                    
                    HStack(spacing: AISpacing.md) {
                        Label("\(data.steps)", systemImage: "figure.walk")
                            .font(AITypography.caption)
                            .foregroundColor(AITheme.textSecondary)
                        
                        Label(String(format: "%.0f", data.activeEnergyBurned), systemImage: "flame.fill")
                            .font(AITypography.caption)
                            .foregroundColor(AITheme.textSecondary)
                        
                        Label(String(format: "%.0f min", data.workoutTime / 60), systemImage: "timer")
                            .font(AITypography.caption)
                            .foregroundColor(AITheme.textSecondary)
                    }
                }
                
                Spacer()
                
                // ËææÊ†áÊåáÁ§∫Âô®
                if data.steps >= 10000 {
                    Image(systemName: "checkmark.circle.fill")
                        .font(.title2)
                        .foregroundColor(AITheme.success)
                }
            }
        }
        .background(isToday ? AITheme.accent.opacity(0.05) : Color.clear)
        .cornerRadius(AIRadius.md)
    }
}

/**
 * Á¥ßÂáëÂ∏ÉÂ±ÄÁöÑÂë®Êï∞ÊçÆËßÜÂõæ
 */
struct CompactWeeklyDataView: View {
    let weeklyData: [HealthData]
    let geometry: GeometryProxy
    
    /// Âè™ÊòæÁ§∫ÊúÄËøë3Â§©ÁöÑÊï∞ÊçÆ
    private var recentData: [HealthData] {
        Array(weeklyData.sorted { $0.date > $1.date }.prefix(3))
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: AISpacing.sm) {
            HStack {
                Text("ÊúÄËøëÊï∞ÊçÆ")
                    .font(AITypography.headline)
                    .fontWeight(.bold)
                    .foregroundColor(AITheme.textPrimary)
                
                Spacer()
                
                Button("Êü•ÁúãÂÖ®ÈÉ®") {
                    // ÂèØ‰ª•Ê∑ªÂä†ÂØºËà™Âà∞ËØ¶ÁªÜÈ°µÈù¢ÁöÑÈÄªËæë
                }
                .font(AITypography.caption)
                .foregroundColor(AITheme.accent)
            }
            
            LazyVStack(spacing: AISpacing.xs) {
                ForEach(recentData) { data in
                    CompactDataRow(data: data)
                }
            }
        }
    }
}

/**
 * Á¥ßÂáëÊï∞ÊçÆË°å
 */
struct CompactDataRow: View {
    let data: HealthData
    
    private var dateFormatter: DateFormatter {
        let formatter = DateFormatter()
        formatter.dateFormat = "MM/dd"
        return formatter
    }
    
    private var isToday: Bool {
        Calendar.current.isDateInToday(data.date)
    }
    
    var body: some View {
        HStack(spacing: AISpacing.sm) {
            VStack(alignment: .leading, spacing: 2) {
                Text(dateFormatter.string(from: data.date))
                    .font(AITypography.caption)
                    .fontWeight(.medium)
                    .foregroundColor(isToday ? AITheme.accent : AITheme.textPrimary)
                
                if isToday {
                    Text("‰ªäÂ§©")
                        .font(AITypography.caption)
                        .foregroundColor(AITheme.accent)
                }
            }
            .frame(width: 40, alignment: .leading)
            
            HStack(spacing: AISpacing.sm) {
                Label("\(data.steps)", systemImage: "figure.walk")
                    .font(AITypography.caption)
                    .foregroundColor(AITheme.textSecondary)
                    .lineLimit(1)
                
                Label("\(Int(data.activeEnergyBurned))", systemImage: "flame.fill")
                    .font(AITypography.caption)
                    .foregroundColor(AITheme.textSecondary)
                    .lineLimit(1)
            }
            
            Spacer()
            
            if data.steps >= 10000 {
                Image(systemName: "checkmark.circle.fill")
                    .font(.caption)
                    .foregroundColor(AITheme.success)
            }
        }
        .padding(.vertical, 4)
        .padding(.horizontal, AISpacing.sm)
        .background(isToday ? AITheme.accent.opacity(0.08) : AITheme.surface)
        .cornerRadius(AIRadius.sm)
    }
}

// MARK: - Êó†Êï∞ÊçÆËßÜÂõæ

/**
 * Êó†Êï∞ÊçÆÊèêÁ§∫ËßÜÂõæ
 */
struct NoDataView: View {
    var body: some View {
        AICard {
            VStack(spacing: AISpacing.md) {
                Image(systemName: "chart.line.uptrend.xyaxis")
                    .font(.system(size: 48))
                    .foregroundStyle(AITheme.primaryGradient)
                
                Text("ÊöÇÊó†ÂÅ•Â∫∑Êï∞ÊçÆ")
                    .font(AITypography.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(AITheme.textPrimary)
                
                Text("ÂºÄÂßã‰ΩøÁî®ËÆæÂ§áËÆ∞ÂΩïÊÇ®ÁöÑÂÅ•Â∫∑Êï∞ÊçÆÔºå\nÊàñÊâãÂä®Ê∑ªÂä†ÂÅ•Â∫∑ËÆ∞ÂΩï")
                    .font(AITypography.body)
                    .foregroundColor(AITheme.textSecondary)
                    .multilineTextAlignment(.center)
            }
            .padding(AISpacing.xl)
        }
    }
}

// MARK: - ÊùÉÈôêËßÜÂõæÁªÑ‰ª∂

/**
 * ÁÆÄÂåñÁöÑÊùÉÈôêËØ∑Ê±ÇËßÜÂõæ
 */
struct SimplePermissionRequestView: View {
    let missingPermissions: [HKObjectType]
    let onPermissionRequested: () async -> Void
    @EnvironmentObject var healthKitService: HealthKitService
    
    var body: some View {
        AICard {
            VStack(spacing: AISpacing.lg) {
                Image(systemName: "lock.shield.fill")
                    .font(.system(size: 48))
                    .foregroundStyle(AITheme.primaryGradient)
                
                Text("ÈúÄË¶ÅÂÅ•Â∫∑Êï∞ÊçÆÊùÉÈôê")
                    .font(AITypography.title2)
                    .fontWeight(.bold)
                    .foregroundColor(AITheme.textPrimary)
                
                Text("Â∫îÁî®ÈúÄË¶ÅËÆøÈóÆ‰ª•‰∏ãÂÅ•Â∫∑Êï∞ÊçÆ‰ª•Êèê‰æõ‰∏™ÊÄßÂåñÂª∫ËÆÆÔºö")
                    .font(AITypography.body)
                    .foregroundColor(AITheme.textSecondary)
                    .multilineTextAlignment(.center)
                
                VStack(alignment: .leading, spacing: AISpacing.sm) {
                    ForEach(Array(missingPermissions.enumerated()), id: \.offset) { _, permission in
                        HStack {
                            Image(systemName: permissionIcon(for: permission))
                                .foregroundColor(AITheme.accent)
                            Text(permissionName(for: permission))
                                .font(AITypography.callout)
                                .foregroundColor(AITheme.textPrimary)
                        }
                    }
                }
                
                AIPrimaryButton("ÊéàÊùÉËÆøÈóÆ", icon: "heart.fill", isLoading: false) {
                    Task {
                        await healthKitService.requestAuthorization()
                        await onPermissionRequested()
                    }
                }
            }
            .padding(AISpacing.lg)
        }
    }
    
    private func permissionIcon(for permission: HKObjectType) -> String {
        if permission == HKQuantityType.quantityType(forIdentifier: .stepCount) {
            return "figure.walk"
        } else if permission == HKQuantityType.quantityType(forIdentifier: .heartRate) {
            return "heart.fill"
        } else if permission == HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned) {
            return "flame.fill"
        } else if permission == HKQuantityType.quantityType(forIdentifier: .distanceWalkingRunning) {
            return "location.fill"
        }
        return "health"
    }
    
    private func permissionName(for permission: HKObjectType) -> String {
        if permission == HKQuantityType.quantityType(forIdentifier: .stepCount) {
            return "Ê≠•Êï∞Êï∞ÊçÆ"
        } else if permission == HKQuantityType.quantityType(forIdentifier: .heartRate) {
            return "ÂøÉÁéáÊï∞ÊçÆ"
        } else if permission == HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned) {
            return "Ê¥ªÂä®Ê∂àËÄó"
        } else if permission == HKQuantityType.quantityType(forIdentifier: .distanceWalkingRunning) {
            return "Ê≠•Ë°åË∑ùÁ¶ª"
        }
        return "ÂÅ•Â∫∑Êï∞ÊçÆ"
    }
}

/**
 * ÂàùÂßãÊùÉÈôêËßÜÂõæ
 */
struct InitialPermissionView: View {
    @EnvironmentObject var healthKitService: HealthKitService
    
    var body: some View {
        AICard {
            VStack(spacing: AISpacing.lg) {
                Image(systemName: "heart.fill")
                    .font(.system(size: 64))
                    .foregroundStyle(AITheme.primaryGradient)
                
                Text("Ê¨¢Ëøé‰ΩøÁî® FitWise AI")
                    .font(AITypography.title1)
                    .fontWeight(.bold)
                    .foregroundColor(AITheme.textPrimary)
                
                Text("‰∏∫‰∫ÜÊèê‰æõ‰∏™ÊÄßÂåñÁöÑÂÅ•Â∫∑Âª∫ËÆÆÔºåÊàë‰ª¨ÈúÄË¶ÅËÆøÈóÆÊÇ®ÁöÑÂÅ•Â∫∑Êï∞ÊçÆ")
                    .font(AITypography.body)
                    .foregroundColor(AITheme.textSecondary)
                    .multilineTextAlignment(.center)
                
                VStack(alignment: .leading, spacing: AISpacing.sm) {
                    PermissionRowView(icon: "figure.walk", title: "Ê≠•Êï∞", description: "ËøΩË∏™ÊÇ®ÁöÑÊó•Â∏∏Ê¥ªÂä®")
                    PermissionRowView(icon: "heart.fill", title: "ÂøÉÁéá", description: "ÁõëÊµãËøêÂä®Âº∫Â∫¶")
                    PermissionRowView(icon: "flame.fill", title: "Âç°Ë∑ØÈáå", description: "ËÆ°ÁÆóËÉΩÈáèÊ∂àËÄó")
                    PermissionRowView(icon: "location.fill", title: "Ë∑ùÁ¶ª", description: "ËÆ∞ÂΩïËøêÂä®Ë∑ùÁ¶ª")
                }
                
                AIPrimaryButton("ÂºÄÂßãÊéàÊùÉ", icon: "arrow.right", isLoading: false) {
                    Task {
                        await healthKitService.requestAuthorization()
                    }
                }
            }
            .padding(AISpacing.xl)
        }
    }
}

/**
 * ÊùÉÈôêË°åËßÜÂõæ
 */
struct PermissionRowView: View {
    let icon: String
    let title: String
    let description: String
    
    var body: some View {
        HStack(spacing: AISpacing.md) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(AITheme.accent)
                .frame(width: 24)
            
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(AITypography.callout)
                    .fontWeight(.semibold)
                    .foregroundColor(AITheme.textPrimary)
                
                Text(description)
                    .font(AITypography.caption)
                    .foregroundColor(AITheme.textSecondary)
            }
            
            Spacer()
        }
    }
}

// MARK: - Extensions

extension DateFormatter {
    static let shortDate: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "MMÊúàddÊó•"
        return formatter
    }()
}

#Preview {
    HomeView()
        .environmentObject(HealthKitService())
}